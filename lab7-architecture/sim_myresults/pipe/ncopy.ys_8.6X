#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
# Include your name and ID here.
# Name:YeXiao
# ID:5130379000
# Describe how and why you modified the baseline code.
#
# The original code:
# Loop:
# 	mrmovl (%ebx), %esi	# read val from src...
# 	rmmovl %esi, (%ecx)	# ...and store it to dst
# 	andl %esi, %esi		# val <= 0?
# 	jle Npos		# if so, goto Npos:
# 	irmovl $1, %edi
# 	addl %edi, %eax		# count++
# Npos:	
#	irmovl $1, %edi
# 	subl %edi, %edx		# len--
# 	irmovl $4, %edi
# 	addl %edi, %ebx		# src++
# 	addl %edi, %ecx		# dst++
# 	andl %edx,%edx		# len > 0?
# 	jg Loop			# if so, goto Loop:
#
# First version:(Using instruction iaddl)
# #Reducing the number of instructions
# Loop:
# 	mrmovl (%ebx), %esi	# read val from src...
# 	rmmovl %esi, (%ecx)	# ...and store it to dst
# 	andl %esi, %esi		# val <= 0?
# 	jle Npos		# if so, goto Npos:
# 	iaddl $1, %eax		# count++
# Npos:	
# 	iaddl $4, %ebx		# src++
# 	iaddl $4, %ecx		# dst++
# 	iaddl $-1, %edx		# len--  len > 0?
# 	andl %edx,%edx		
# 	jg Loop			# if so, goto Loop:
#
# Second version:(Changing forecasting)
# #Reducing the number of wrong hazarding
#	rrmovl	%edx,%eax	# count=len
# Loop:
# 	mrmovl (%ebx), %esi	# read val from src...
# 	rmmovl %esi, (%ecx)	# ...and store it to dst
# 	andl %esi, %esi		# val > 0?
# 	jg Npos			# if so, goto Npos:
# 	iaddl $1, %eax		# count--
# Npos:	
# 	iaddl $4, %ebx		# src++
# 	iaddl $4, %ecx		# dst++
# 	iaddl $-1, %edx		# len--  len > 0?		
# 	jg Loop			# if so, goto Loop:
#
# Third version:(Unrolling Loop)
# #Reducing the number of instructions such as
# #iaddl $4, %ebx
# #iaddl $4, %ecx
# #jg Loop
##################################################################
# Do not modify this portion
# Function prologue.
ncopy:	pushl %ebp		# Save old frame pointer
	rrmovl %esp,%ebp	# Set up new frame pointer
	pushl %esi		# Save callee-save regs
	pushl %ebx
	pushl %edi
	mrmovl 8(%ebp),%ebx	# src
	mrmovl 16(%ebp),%edx	# len
	mrmovl 12(%ebp),%ecx	# dst

##################################################################
	rrmovl %edx, %eax			# count=len
	iaddl $-16, %edx			# len-=16
	jle Switch  			# if len<=0, goto Switch
# Loop Start
Expand0:
	mrmovl 0(%ebx), %esi		# read val from (src + 0)
	mrmovl 4(%ebx), %edi		# read val from (src + 4)
	rmmovl %esi, 0(%ecx) 		# store it to (dst + 0)
	rmmovl %edi, 4(%ecx) 		# store it to (dst + 4)
	andl %esi, %esi			# val > 0?
	jg Expand1			# if so, goto Expand1;
	iaddl $-1, %eax			# count--
Expand1:
	andl %edi, %edi			# val > 0?
	jg Expand2			# if so, goto Expand2;
	iaddl $-1, %eax			# count--
Expand2:
	mrmovl 8(%ebx), %esi		# read val from (src + 8)
	mrmovl 12(%ebx), %edi		# read val from (src + 12)
	rmmovl %esi, 8(%ecx) 		# store it to (dst + 8)
	rmmovl %edi, 12(%ecx) 		# store it to (dst + 12)
	andl %esi, %esi			# val > 0?
	jg Expand3			# if so, goto Expand3;
	iaddl $-1, %eax			# count--
Expand3:
	andl %edi, %edi			# val > 0?
	jg Expand4			# if so, goto Expand4;
	iaddl $-1, %eax			# count--
Expand4:
	mrmovl 16(%ebx), %esi		# read val from (src + 16)
	mrmovl 20(%ebx), %edi		# read val from (src + 20)
	rmmovl %esi, 16(%ecx) 		# store it to (dst + 16)
	rmmovl %edi, 20(%ecx) 		# store it to (dst + 20)
	andl %esi, %esi			# val > 0?
	jg Expand5			# if so, goto Expand5;
	iaddl $-1, %eax			# count--
Expand5:
	andl %edi, %edi			# val > 0?
	jg Expand6			# if so, goto Expand6;
	iaddl $-1, %eax			# count--
Expand6:
	mrmovl 24(%ebx), %esi		# read val from (src + 24)
	mrmovl 28(%ebx), %edi		# read val from (src + 28)
	rmmovl %esi, 24(%ecx) 		# store it to (dst + 24)
	rmmovl %edi, 28(%ecx) 		# store it to (dst + 28)
	andl %esi, %esi			# val > 0?
	jg Expand7			# if so, goto Expand7;
	iaddl $-1, %eax			# count--
Expand7:
	andl %edi, %edi			# val > 0?
	jg Expand8			# if so, goto Expand8;
	iaddl $-1, %eax			# count--
Expand8:
	mrmovl 32(%ebx), %esi		# read val from (src + 32)
	mrmovl 36(%ebx), %edi		# read val from (src + 36)
	rmmovl %esi, 32(%ecx) 		# store it to (dst + 32)
	rmmovl %edi, 36(%ecx) 		# store it to (dst + 36)
	andl %esi, %esi			# val > 0?
	jg Expand9			# if so, goto Expand9;
	iaddl $-1, %eax			# count--
Expand9:
	andl %edi, %edi			# val > 0?
	jg Expand10			# if so, goto Expand10;
	iaddl $-1, %eax			# count--
Expand10:
	mrmovl 40(%ebx), %esi		# read val from (src + 40)
	mrmovl 44(%ebx), %edi		# read val from (src + 44)
	rmmovl %esi, 40(%ecx) 		# store it to (dst + 40)
	rmmovl %edi, 44(%ecx) 		# store it to (dst + 44)
	andl %esi, %esi			# val > 0?
	jg Expand11			# if so, goto Expand11;
	iaddl $-1, %eax			# count--
Expand11:
	andl %edi, %edi			# val > 0?
	jg Expand12			# if so, goto Expand12;
	iaddl $-1, %eax			# count--
Expand12:
	mrmovl 48(%ebx), %esi		# read val from (src + 48)
	mrmovl 52(%ebx), %edi		# read val from (src + 52)
	rmmovl %esi, 48(%ecx) 		# store it to (dst + 48)
	rmmovl %edi, 52(%ecx) 		# store it to (dst + 52)
	andl %esi, %esi			# val > 0?
	jg Expand13			# if so, goto Expand13;
	iaddl $-1, %eax			# count--
Expand13:
	andl %edi, %edi			# val > 0?
	jg Expand14			# if so, goto Expand14;
	iaddl $-1, %eax			# count--
Expand14:
	mrmovl 56(%ebx), %esi		# read val from (src + 56)
	mrmovl 60(%ebx), %edi		# read val from (src + 60)
	rmmovl %esi, 56(%ecx) 		# store it to (dst + 56)
	rmmovl %edi, 60(%ecx) 		# store it to (dst + 60)
	andl %esi, %esi			# val > 0?
	jg Expand15			# if so, goto Expand15;
	iaddl $-1, %eax			# count--
Expand15:
	andl %edi, %edi			# val > 0?
	jg Expand16			# if so, goto Expand16;
	iaddl $-1, %eax			# count--
Expand16:
	iaddl $64, %ebx			# src+=16
	iaddl $64, %ecx			# dst+=16
	iaddl $-16, %edx		# len-=16
	jg Expand0
# Loop End
Switch:
	iaddl $16, %edx			# len+=16
	addl %edx,%edx			# len*=4
	addl %edx,%edx
	mrmovl jmpTable(%edx), %edx		# jump position=4*len+jmpTable
	pushl %edx			# goto jump position
	ret
case16:
	mrmovl 60(%ebx), %esi		# read val from (src + 60)
	rrmovl %eax, %edi
	rmmovl %esi, 60(%ecx) 		# store it to (dst + 60)
	iaddl $-1,%edi
	andl %esi, %esi			# val > 0?
	cmovle %edi,%eax			# count--
case15:
	mrmovl 56(%ebx), %esi		# read val from (src + 56)
	rrmovl %eax, %edi
	rmmovl %esi, 56(%ecx) 		# store it to (dst + 56)
	iaddl $-1,%eax
	andl %esi, %esi			# val > 0?
	cmovg %edi,%eax			# count--
case14:
	mrmovl 52(%ebx), %esi		# read val from (src + 52)
	rrmovl %eax, %edi
	rmmovl %esi, 52(%ecx) 		# store it to (dst + 52)
	iaddl $-1,%eax
	andl %esi, %esi			# val > 0?
	cmovg %edi,%eax			# count--
case13:
	mrmovl 48(%ebx), %esi		# read val from (src + 48)
	rrmovl %eax, %edi
	rmmovl %esi, 48(%ecx) 		# store it to (dst + 48)
	iaddl $-1,%edi
	andl %esi, %esi			# val > 0?
	cmovle %edi,%eax			# count--
case12:
	mrmovl 44(%ebx), %esi		# read val from (src + 44)
	rrmovl %eax, %edi
	rmmovl %esi, 44(%ecx) 		# store it to (dst + 44)
	iaddl $-1,%edi
	andl %esi, %esi			# val > 0?
	cmovle %edi,%eax			# count--
case11:
	mrmovl 40(%ebx), %esi		# read val from (src + 40)
	rrmovl %eax, %edi
	rmmovl %esi, 40(%ecx) 		# store it to (dst + 40)
	iaddl $-1,%eax
	andl %esi, %esi			# val > 0?
	cmovg %edi,%eax			# count--
case10:
	mrmovl 36(%ebx), %esi		# read val from (src + 36)
	rrmovl %eax, %edi
	rmmovl %esi, 36(%ecx) 		# store it to (dst + 36)
	iaddl $-1,%eax
	andl %esi, %esi			# val > 0?
	cmovg %edi,%eax			# count--
case9:
	mrmovl 32(%ebx), %esi		# read val from (src + 32)
	rrmovl %eax, %edi
	rmmovl %esi, 32(%ecx) 		# store it to (dst + 32)
	iaddl $-1,%edi
	andl %esi, %esi			# val > 0?
	cmovle %edi,%eax			# count--
case8:
	mrmovl 28(%ebx), %esi		# read val from (src + 28)
	rrmovl %eax, %edi
	rmmovl %esi, 28(%ecx) 		# store it to (dst + 28)
	iaddl $-1,%edi
	andl %esi, %esi			# val > 0?
	cmovle %edi,%eax			# count--
case7:
	mrmovl 24(%ebx), %esi		# read val from (src + 24)
	rrmovl %eax, %edi
	rmmovl %esi, 24(%ecx) 		# store it to (dst + 24)
	iaddl $-1,%eax
	andl %esi, %esi			# val > 0?
	cmovg %edi,%eax			# count--
case6:
	mrmovl 20(%ebx), %esi		# read val from (src + 20)
	rrmovl %eax, %edi
	rmmovl %esi, 20(%ecx) 		# store it to (dst + 20)
	iaddl $-1,%eax
	andl %esi, %esi			# val > 0?
	cmovg %edi,%eax			# count--
case5:
	mrmovl 16(%ebx), %esi		# read val from (src + 16)
	rrmovl %eax, %edi
	rmmovl %esi, 16(%ecx) 		# store it to (dst + 16)
	iaddl $-1,%edi
	andl %esi, %esi			# val > 0?
	cmovle %edi,%eax			# count--
case4:
	mrmovl 12(%ebx), %esi		# read val from (src + 12)
	rrmovl %eax, %edi
	rmmovl %esi, 12(%ecx) 		# store it to (dst + 12)
	iaddl $-1,%edi
	andl %esi, %esi			# val > 0?
	cmovle %edi,%eax			# count--
case3:
	mrmovl 8(%ebx), %esi		# read val from (src + 8)
	rrmovl %eax, %edi
	rmmovl %esi, 8(%ecx) 		# store it to (dst + 8)
	iaddl $-1,%eax
	andl %esi, %esi			# val > 0?
	cmovg %edi,%eax			# count--
case2:
	mrmovl 4(%ebx), %esi		# read val from (src + 4)
	rrmovl %eax, %edi
	rmmovl %esi, 4(%ecx) 		# store it to (dst + 4)
	iaddl $-1, %eax
	andl %esi, %esi
	cmovg %edi,%eax
case1:
	mrmovl 0(%ebx), %esi		# read val from (src + 0)
	rrmovl %eax,%edi
	rmmovl %esi, 0(%ecx) 		# store it to (dst + 0)
	iaddl $-1,%edi
	andl %esi, %esi			# val > 0?
	cmovle %edi,%eax
myEnd:
	leave
	ret
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	popl %edi               # Restore callee-save registers
	popl %ebx
	popl %esi
	rrmovl %ebp, %esp
	popl %ebp
	ret
##################################################################
#jumptable
	.align 4
jmpTable:
	.long myEnd
	.long case1
	.long case2
	.long case3
	.long case4
	.long case5
	.long case6
	.long case7
	.long case8
	.long case9
	.long case10
	.long case11
	.long case12
	.long case13
	.long case14
	.long case15
	.long case16
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
